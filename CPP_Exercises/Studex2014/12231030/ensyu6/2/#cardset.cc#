//
// cardset.cc - ’¥È’¥é’¥ó’¥×’¥«’¡¼’¥É’¤Î’½¸’¹ç’·¿(C++’ÈÇ)
//	’ºî’¼Ô: (’¤¢’¤Ê’¤¿’¤Î’Ì¾’Á°); ’Æü’ÉÕ: (’´°’À®’¤·’¤¿’Æü’ÉÕ)
//
#include <iostream>
#include "cardset.h"

//
// Card::scan() - ’É¸’½à’½Ð’ÎÏ’¤«’¤é’¼«’¿È’¤Ë’Æþ’ÎÏ’¤¹’¤ë(true: ’¥¨’¥é’¡¼; false: ’Àµ’¾ï’½ª’Î»)
//
bool Card::scan(void)
{
  char buf[BUFSIZ];
  // initialize static const variable
  const char * suitnames[] = {
  		"spade",
  		"diamond",
  		"heart",
  		"club",
  		"joker"
  };

  // 4’ÁÈ’¤Î’¤¤’¤º’¤ì’¤«’¤Ê’¤é’ÈÖ’¹æ’¤â’Æþ’ÎÏ’¤¹’¤ë
  if(scanf("%s", buf) < 1)
    return true;
  for(int s = SUIT_SPADE; s <= SUIT_CLUB; s++)
    if(!strcmp(buf, suitnames[s])) {
      suit = s;
      if(scanf("%d", &number) < 1)
	return true;
      if(number < 1 || number > 13)
	return true;
      return false;
    }
	
  // joker ’¤Ï’¤½’¤Î’¤Þ’¤Þ(number ’¤Ï 0 ’¤È’¤¹’¤ë)
  if(!strcmp(buf, "joker")) {
    suit = SUIT_JOKER;
    number = 0;
    return false;
  }
  
  return true;	// ’¥¨’¥é’¡¼
}

//
// Card::print() - ’¼«’¿È’¤Î’ÃÍ’¤ò’É¸’½à’½Ð’ÎÏ’¤Ë’½Ð’ÎÏ’¤¹’¤ë
//
void Card::print(void)
{
  char* suitname[] = { "spade", "diamond", "heart", "club" };
  
  if(suit < SUIT_JOKER)
    printf("[%s %d]", suitname[suit], number);
  else if(suit == SUIT_JOKER)
    printf("[joker]");
}



//
// CardSet::locate() - ’Æâ’Éô’¤Ç’¤Î target ’¤Î’¥«’¡¼’¥É’¤Î’°Ì’ÃÖ’¤ò’ÊÖ’¤¹(-1: ’¤Ê’¤¤)
//
int CardSet::locate(Card target)
{
  for(int i = 0; i < numcard; i++)
    if(target.equal(cdat[i]))
      return i;
  
  return -1;	// ’¸«’¤Ä’¤«’¤é’¤Ê’¤«’¤Ã’¤¿
}

//
// CardSet::locate() - ’Æâ’Éô’¤Ç’¿ô’»ú’¤¬ num ’¤Î’¥«’¡¼’¥É’¤Î’°Ì’ÃÖ’¤ò’ÊÖ’¤¹(-1: ’¤Ê’¤¤)
//
int CardSet::locate(int number)
{
  for(int i = 0; i < numcard; i++)
    if(number == cdat[i].gnumber())
      return i;
  
  return -1;	// ’¸«’¤Ä’¤«’¤é’¤Ê’¤«’¤Ã’¤¿
}

//
// CardSet::makedeck() - ’¼«’¿È’¤Ë’Á´’Éô’¤Î(maxnumcard ’Ëç’¤Î)’¥«’¡¼’¥É’¤ò’Æþ’¤ì’¤ë
//
void CardSet::makedeck(void)
{
  Card c;
  int suit, num;
  
  for(suit = Card::SUIT_SPADE; suit <= Card::SUIT_CLUB; suit++)
    for(num = 1; num <= 13; num++) {
      c.set(suit, num);
      insert(c);
    }
  c.set(Card::SUIT_JOKER, 0);
  insert(c);
}

//
// CardSet::pickup() - ’¼«’¿È’¤«’¤é targetpos ’Ëç’ÌÜ’¤Î’¥«’¡¼’¥É’¤ò’½ü’¤­ *ret ’¤Ë’ÊÖ’¤¹
//	targetpos ’¤¬ -1 ’¤Î’¤È’¤­’¤Ï’¥é’¥ó’¥À’¥à’¤Ë’Áª’¤Ö(true: ’¼º’ÇÔ; false: ’À®’¸ù)
//
bool CardSet::pickup(Card* ret, int targetpos /* = -1 */)
{
  if(numcard == 0)
    return true;
  if(targetpos < 0)
    targetpos = random() % numcard;
  else
    targetpos %= numcard;
  
  *ret = cdat[targetpos];
  // remove(*ret); // remove() ’¼Â’¸½’¸å’¤Ë’¥³’¥á’¥ó’¥È’¤ò’³°’¤»
  
  return false;
}

//
// CardSet::insert() - ’¼«’¿È’¤Ë newcard ’¤Î’¥«’¡¼’¥É’¤ò’Æþ’¤ì’¤ë(true: ’¼º’ÇÔ; false: ’À®’¸ù)
//
bool CardSet::insert(Card newcard)
{
  if(locate(newcard) >= 0)
    return true;	// ’´û’¤Ë’¤¢’¤ë
  // ’ºÇ’¸å’¤Ë’ÄÉ’²Ã
  cdat[numcard] = newcard;
  numcard++;
  
  return false;
}


//
// CardSet::print() - ’¼«’¿È’¤Î’¾õ’ÂÖ’¤ò’É¸’½à’½Ð’ÎÏ’¤Ë’½Ð’ÎÏ’¤¹’¤ë
//
void CardSet::print(void)
{
  printf("((CARDSET))\n");
  if(numcard == 0) {
    printf("\tno card\n");
    return;
  }
  for(int i = 0; i < numcard; i++) {
    printf("\t");
    cdat[i].print();
    printf("\n");
  }
}

//
// bool remove(Card target)’¼«’¿È’¤«’¤é target ’¤Î’¥«’¡¼’¥É’¤ò’½ü’¤¯(true: ’¼º’ÇÔ; false: ’À® ’¸ù)
//


bool CardSet::remove(Card target)
{
  int i;
  int targetLocate = locate(target);

  //’¥¿’¡¼’¥²’¥Ã’¥È’¤¬’»¥’¤Î’Ãæ’¤Ë’¤¢’¤Ã’¤¿’¤È’¤­
  if(targetLocate >= 0 ) {
    for(i=targetLocate;i<numcard;i++) {
      //’¥¿’¡¼’¥²’¥Ã’¥È’¤ò’¤ò’¸å’¤í’¤Î’»¥’¤ò’¤Ò’¤È’¤Ä’¤º’¤Ä’Á°’¤Ë’Æ°’¤«’¤·’¤Æ’¾Ã’¤¹
      cdat[i]=cdat[i+1];
    }
    //’»¥’¤Î’Ëç’¿ô’¤ò’¸º’¤é’¤¹
    numcard -= 1;
    return false;
  }

  return true;
}

//
// ’¼«’¿È’¤«’¤é’¿ô’»ú’¤¬ num ’¤Ç’¤¢’¤ë’¥«’¡¼’¥É’¤ò’½ü’¤¯(true: ’¼º’ÇÔ; false: ’À®’¸ù)
//
bool CardSet::remove(int num) {
  int i,j;

  for(i=0;i<numcard;i++) 
    //’Æþ’ÎÏ’¤µ’¤ì’¤¿’¿ô’¤È’Æ±’¤¸’»¥’¤ò’Ãµ’¤¹
    if(cdat[i].gnumber()==num) {
      for(j=i;j<numcard;j++) {
	//’¸å’¤í’¤Î’»¥’¤ò’¤Ò’¤È’¤Ä’¤º’¤Ä’Á°’¤Ë’Æ°’¤«’¤·’¤Æ’¾Ã’¤¹
        cdat[j]= cdat[j+1];
      }
      //’»¥’¤Î’Ëç’¿ô’¤ò’¸º’¤é’¤¹
      numcard -= 1;
    
      return false;
    }
  }
  return true;

}

